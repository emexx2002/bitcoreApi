/// <reference types="node" />
import { CoinSelectionWallet } from './wallet/coin-selection-wallet';
import { Address, BigNum, Bip32PrivateKey, Bip32PublicKey, Ed25519KeyHash, Mint, MultiAsset, NativeScript, PrivateKey, PublicKey, ScriptHash, Transaction, TransactionBody, TransactionMetadata, TransactionMetadatum } from '@emurgo/cardano-serialization-lib-nodejs';
import { TokenWallet } from './wallet/token-wallet';
import { WalletsAssetsAvailable } from './models';
import { AssetWallet } from './wallet/asset-wallet';
export declare class Seed {
    static generateRecoveryPhrase(size?: number): string;
    static toMnemonicList(phrase: string): Array<string>;
    static deriveRootKey(phrase: string | string[]): Bip32PrivateKey;
    static deriveAccountKey(key: Bip32PrivateKey, index?: number): Bip32PrivateKey;
    static deriveKey(key: Bip32PrivateKey, path: string[]): Bip32PrivateKey;
    static buildTransaction(coinSelection: CoinSelectionWallet, ttl: number, opts?: {
        [key: string]: any;
    }): TransactionBody;
    static buildTransactionWithToken(coinSelection: CoinSelectionWallet, ttl: number, tokens: TokenWallet[], signingKeys: PrivateKey[], opts?: {
        [key: string]: any;
    }): TransactionBody;
    static buildMultiAssets(assets: WalletsAssetsAvailable[]): MultiAsset;
    static buildTransactionMint(tokens: TokenWallet[]): Mint;
    static getTransactionFee(tx: Transaction, config?: {
        activeSlotsCoeff: number;
        protocolParams: {
            protocolVersion: {
                minor: number;
                major: number;
            };
            decentralisationParam: number;
            eMax: number;
            extraEntropy: {
                tag: string;
            };
            maxTxSize: number;
            maxBlockBodySize: number;
            maxBlockHeaderSize: number;
            minFeeA: number;
            minFeeB: number;
            minUTxOValue: number;
            poolDeposit: number;
            minPoolCost: number;
            keyDeposit: number;
            nOpt: number;
            rho: number;
            tau: number;
            a0: number;
        };
        genDelegs: {
            ad5463153dc3d24b9ff133e46136028bdc1edbb897f5a7cf1b37950c: {
                delegate: string;
                vrf: string;
            };
            b9547b8a57656539a8d9bc42c008e38d9c8bd9c8adbb1e73ad529497: {
                delegate: string;
                vrf: string;
            };
            "60baee25cbc90047e83fd01e1e57dc0b06d3d0cb150d0ab40bbfead1": {
                delegate: string;
                vrf: string;
            };
            f7b341c14cd58fca4195a9b278cce1ef402dc0e06deb77e543cd1757: {
                delegate: string;
                vrf: string;
            };
            "162f94554ac8c225383a2248c245659eda870eaa82d0ef25fc7dcd82": {
                delegate: string;
                vrf: string;
            };
            "2075a095b3c844a29c24317a94a643ab8e22d54a3a3a72a420260af6": {
                delegate: string;
                vrf: string;
            };
            "268cfc0b89e910ead22e0ade91493d8212f53f3e2164b2e4bef0819b": {
                delegate: string;
                vrf: string;
            };
        };
        updateQuorum: number;
        networkId: string;
        initialFunds: {};
        maxLovelaceSupply: number;
        networkMagic: number;
        epochLength: number;
        systemStart: string;
        slotsPerKESPeriod: number;
        slotLength: number;
        maxKESEvolutions: number;
        securityParam: number;
    }): BigNum;
    static sign(txBody: TransactionBody, privateKeys: PrivateKey[], transactionMetadata?: TransactionMetadata, scripts?: NativeScript[]): Transaction;
    static signMessage(key: PrivateKey, message: string): string;
    static verifyMessage(key: PublicKey, message: string, signed: string): boolean;
    static harden(num: number): number;
    static constructMetadata(data: any): any;
    static getMetadataObject(data: any): any;
    static reverseMetadata(data: any, type?: string): any;
    static reverseMetadataObject(data: any): any;
    static buildTransactionMetadata(data: any): TransactionMetadata;
    static getTransactionMetadatum(value: any): TransactionMetadatum;
    static generateKeyPair(): Bip32KeyPair;
    static generateEnterpriseAddress(pubKey: Bip32PublicKey, network?: string): Address;
    static getKeyHash(key: Bip32PublicKey): Ed25519KeyHash;
    static buildSingleIssuerScript(keyHash: Ed25519KeyHash): NativeScript;
    static buildMultiIssuerAllScript(scripts: NativeScript[]): NativeScript;
    static buildMultiIssuerAnyScript(scripts: NativeScript[]): NativeScript;
    static buildMultiIssuerAtLeastScript(n: number, scripts: NativeScript[]): NativeScript;
    static buildAfterScript(slot: number): NativeScript;
    static buildBeforeScript(slot: number): NativeScript;
    private static buildNativeScripts;
    static getScriptHash(script: NativeScript): ScriptHash;
    static getPolicyId(scriptHash: ScriptHash): string;
    static getScriptHashFromPolicy(policyId: string): ScriptHash;
    static getMinUtxoValueWithAssets(tokenAssets: AssetWallet[], config?: {
        [key: string]: any;
    }, encoding?: BufferEncoding): number;
    private static isInteger;
}
export declare class Bip32KeyPair {
    privateKey: Bip32PrivateKey;
    publicKey: Bip32PublicKey;
}
export declare enum MetadateTypesEnum {
    Number = "int",
    String = "string",
    Bytes = "bytes",
    List = "list",
    Map = "map"
}
export declare const CARDANO_PUROPOSE = 1852;
export declare const CARDANO_COIN_TYPE = 1815;
export declare const CARDANO_EXTERNAL = 0;
export declare const CARDANO_CHANGE = 1;
export declare const CARDANO_CHIMERIC = 2;

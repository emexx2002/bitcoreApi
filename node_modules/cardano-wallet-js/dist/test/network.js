"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
require("mocha");
var models_1 = require("../models");
var api_network_information_1 = require("../models/api-network-information");
var wallet_server_1 = require("../wallet-server");
var dotenv = require("dotenv");
dotenv.config();
describe('Cardano wallet network', function () {
    var walletServer;
    var syncProgress = ['syncing', 'ready'];
    var nodeEras = [api_network_information_1.ApiNetworkInformationNodeEraEnum.Allegra, api_network_information_1.ApiNetworkInformationNodeEraEnum.Byron, api_network_information_1.ApiNetworkInformationNodeEraEnum.Mary, api_network_information_1.ApiNetworkInformationNodeEraEnum.Shelley];
    var clockStatus = [models_1.ApiNetworkClockStatusEnum.Available, models_1.ApiNetworkClockStatusEnum.Unavailable, models_1.ApiNetworkClockStatusEnum.Pending];
    var serverSettings = {
        "pool_metadata_source": "direct"
    };
    before('Initializing test cluster', function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                walletServer = wallet_server_1.WalletServer.init("http://" + process.env.TEST_WALLET_HOST + ":" + process.env.TEST_WALLET_PORT + "/v2");
                return [2 /*return*/];
            });
        });
    });
    it("should get network information", function () {
        return __awaiter(this, void 0, void 0, function () {
            var information;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, walletServer.getNetworkInformation()];
                    case 1:
                        information = _a.sent();
                        chai_1.expect(information).have.property('network_tip').with.property('time').be.a('string');
                        chai_1.expect(information).have.property('network_tip').with.property('epoch_number').be.a('number');
                        chai_1.expect(information).have.property('network_tip').with.property('absolute_slot_number').be.a('number');
                        chai_1.expect(information).have.property('network_tip').with.property('slot_number').be.a('number');
                        chai_1.expect(information).have.property('node_tip').with.property('time').be.a('string');
                        chai_1.expect(information).have.property('node_tip').with.property('epoch_number').be.a('number');
                        chai_1.expect(information).have.property('node_tip').with.property('absolute_slot_number').be.a('number');
                        chai_1.expect(information).have.property('node_tip').with.property('slot_number').be.a('number');
                        chai_1.expect(information).have.property('node_tip').with.property('height').with.property('quantity').be.a('number');
                        chai_1.expect(information).have.property('node_tip').with.property('height').with.property('unit').equal('block');
                        chai_1.expect(information).have.property('next_epoch').with.property('epoch_start_time').be.a('string');
                        chai_1.expect(information).have.property('next_epoch').with.property('epoch_number').be.a('number');
                        chai_1.expect(syncProgress).include(information.sync_progress.status);
                        if (information.sync_progress.status === syncProgress[0]) {
                            chai_1.expect(information.sync_progress).have.property('progress').with.property('quantity').be.a('number');
                            chai_1.expect(information.sync_progress).have.property('progress').with.property('unit').equal('percent');
                        }
                        chai_1.expect(nodeEras).include(information.node_era);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get network clock', function () {
        return __awaiter(this, void 0, void 0, function () {
            var clock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, walletServer.getNetworkClock()];
                    case 1:
                        clock = _a.sent();
                        chai_1.expect(clockStatus).include(clock.status);
                        chai_1.expect(clock).have.property('offset').with.property('quantity').be.a('number');
                        chai_1.expect(clock).have.property('offset').with.property('unit').equal('microsecond');
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get network parameters', function () {
        return __awaiter(this, void 0, void 0, function () {
            var slotLengthUnits, coefficientUnits, epochLengthUnits, heightUnits, amountUnits, parameters, shelley, mary, byron, allegra;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        slotLengthUnits = [models_1.ApiNetworkParametersSlotLengthUnitEnum.Second];
                        coefficientUnits = [models_1.ApiNetworkParametersActiveSlotCoefficientUnitEnum.Percent];
                        epochLengthUnits = [models_1.ApiNetworkParametersEpochLengthUnitEnum.Slot];
                        heightUnits = [models_1.WalletsTipHeightUnitEnum.Block];
                        amountUnits = [models_1.WalletswalletIdpaymentfeesAmountUnitEnum.Lovelace];
                        return [4 /*yield*/, walletServer.getNetworkParameters()];
                    case 1:
                        parameters = _a.sent();
                        chai_1.expect(parameters).have.property('slot_length').with.property('quantity').be.a('number');
                        chai_1.expect(slotLengthUnits).include(parameters.slot_length.unit);
                        chai_1.expect(parameters).have.property('decentralization_level').with.property('quantity').be.a('number');
                        chai_1.expect(coefficientUnits).include(parameters.decentralization_level.unit);
                        chai_1.expect(parameters).have.property('genesis_block_hash').lengthOf(64);
                        chai_1.expect(parameters).have.property('blockchain_start_time').be.a('string');
                        chai_1.expect(parameters).have.property('desired_pool_number').be.a('number');
                        chai_1.expect(parameters).have.property('epoch_length').with.property('quantity').be.a('number');
                        chai_1.expect(epochLengthUnits).include(parameters.epoch_length.unit);
                        shelley = parameters.eras.shelley;
                        mary = parameters.eras.mary;
                        byron = parameters.eras.byron;
                        allegra = parameters.eras.allegra;
                        chai_1.expect(mary).have.property('epoch_start_time').be.a('string');
                        chai_1.expect(mary).have.property('epoch_number').be.a('number');
                        chai_1.expect(shelley).have.property('epoch_start_time').be.a('string');
                        chai_1.expect(shelley).have.property('epoch_number').be.a('number');
                        chai_1.expect(byron).have.property('epoch_start_time').be.a('string');
                        chai_1.expect(byron).have.property('epoch_number').be.a('number');
                        chai_1.expect(allegra).have.property('epoch_start_time').be.a('string');
                        chai_1.expect(allegra).have.property('epoch_number').be.a('number');
                        chai_1.expect(parameters).have.property('active_slot_coefficient').with.property('quantity').be.a('number');
                        chai_1.expect(coefficientUnits).include(parameters.active_slot_coefficient.unit);
                        chai_1.expect(parameters).have.property('security_parameter').with.property('quantity').be.a('number');
                        chai_1.expect(heightUnits).include(parameters.security_parameter.unit);
                        chai_1.expect(parameters).have.property('minimum_utxo_value').with.property('quantity').be.a('number');
                        chai_1.expect(amountUnits).include(parameters.minimum_utxo_value.unit);
                        return [2 /*return*/];
                }
            });
        });
    });
    it("should update metadata source", function () {
        return __awaiter(this, void 0, void 0, function () {
            var poolMetadataSource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        poolMetadataSource = "direct";
                        return [4 /*yield*/, walletServer.updateMetadataSource(poolMetadataSource)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it("should get metadata source", function () {
        return __awaiter(this, void 0, void 0, function () {
            var metadataSource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, walletServer.getMetadataSource()];
                    case 1:
                        metadataSource = _a.sent();
                        chai_1.expect(serverSettings.pool_metadata_source).equal(metadataSource);
                        return [2 /*return*/];
                }
            });
        });
    });
});

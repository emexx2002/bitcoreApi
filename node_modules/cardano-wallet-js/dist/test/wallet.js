"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
chai.use(chaiAsPromised);
var expect = chai.expect;
require("mocha");
var models_1 = require("../models");
var utils_1 = require("../utils");
var wallet_server_1 = require("../wallet-server");
var key_wallet_1 = require("../wallet/key-wallet");
var dotenv = require("dotenv");
var config_1 = require("../config");
dotenv.config();
describe('Cardano wallet API', function () {
    this.timeout(0);
    var walletServer;
    var wallets = [
        {
            "passphrase": "shellley-no-delegation",
            "mnemonic_sentence": ["over", "decorate", "flock", "badge", "beauty", "stamp", "chest", "owner", "excess", "omit", "bid", "raccoon", "spin", "reduce", "rival"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 100000000000,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 100000000000,
                    "unit": "lovelace"
                }
            },
            "name": "shelley-no-delegation",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "2a793eb367d44a42f658eb02d1004f50c14612fd",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            },
            "txs": [
                {
                    "inserted_at": {
                        "height": {
                            "quantity": 9,
                            "unit": "block"
                        },
                        "time": "2021-03-31T22:28:15.2Z",
                        "epoch_number": 1,
                        "absolute_slot_number": 66,
                        "slot_number": 16
                    },
                    "status": "in_ledger",
                    "withdrawals": [],
                    "amount": {
                        "quantity": 100000000000,
                        "unit": "lovelace"
                    },
                    "inputs": [
                        {
                            "id": "1669654d59d76084dfd7c14a0960d3de56f81d24e5a19351853ea0be434b3ed1",
                            "index": 0
                        }
                    ],
                    "direction": "incoming",
                    "fee": {
                        "quantity": 0,
                        "unit": "lovelace"
                    },
                    "outputs": [
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9m7qqkehg8y08wkw0p8qrnkrsqdj4tew78r7vqt0e4rfyg6e628h",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxk7zajwxrj7d63d857leyr5xjns5eqwu90t7av9s3qansgy3n03h",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxzfrx9fqmr9rksy3d3p5dt4s7kuzvxecptp4g6k6jyjf0c4wqrqv",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9fgg22y8zg9ew0sr8zecem3awlp8y2nkz06pj9rp0jze2g8yaz8s",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxqxrkn4m9gkkw9zjxv0ucclakl9yk0mf58szfnexv6gp4cqd8lmc",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxyh67eruv8lk7j5cd4uxxlwzhh5s37agmq82g8yly8d6ysgvf36v",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8fh0twhfl8asg2umdrghc0atawtlsvgtn4w2em5cdka5nq9htxna",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9jxt6pyruyjp09hcgmfz842cewgd76rft7kc2th7xaq74qfcrflh",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vynncsy67q5gzuextklwhgg7fqesm28lk7k3tryy4j9cmfsepfas7",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxwghnp98zdnqwxhsjccm4w7kcz5u5cazhe6f3dyes4g7pgf6f5lp",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8kjvptz7htc03uck4a6s78cvuetqgwhqyt5kf7mtleta8ce94xxu",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxy82rpx84s58vy74y34gy88lw0x0hvttuap6599nujp3cgdqvwsh",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8twacd3svulf74kxg4us59yrvp3lt4ajvl90w3u8vdjx2cajgkgy",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxwz08f2nd28eagctmpfxzcv8xn5lg8d4wjpx20ypfn93zcs8uucg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx9n2zkkgc6gqy2j3kkyfxjf27mtm98lx0vnwhj5jz5uasq9yl5hk",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9zsagjclpwam9p6humeg87x7r8r268kf5k8h5kun0sh3rgs7536w",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyjqralj63q5xyw03sxxeyc8svfk3ymrw2gwj79p0p00lxcapajam",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx7r3cy4uanwjgqjyttnymqkqsrt448ezylrkkdvqrjzxzssn75lu",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vydvk9kl2tqf5wkxajalkgf8kemjak3glhrm4d5l99jwhysfqx5ts",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy7qf5ctc8ydaz0d0g8dwy05eq8d4mtenlz377mzpec45sgk3f5q0",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9c36pmak8t8a8ra8jz347rmv3vxxq4mvc3ccmn9aez9glgq5mwq6",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy3f4vhj8xt9x8t93np94uak2kptltuw2spr0a7jy0jnftgzskwy5",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8y20cs4h8n4jcf6fgpkf9yea35r8sawazk7r7rktf9w2hssz5yu7",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v94ywg549gh0zs4g9fmty4tgm0cq5a95lsm29lccpezks3qf9w3hg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v876apusu8nfs6d6apgmj6vp5lcjjxmlvlc2sj9y98wtv5c7qc2yq",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxyht88xde2nj25wfm63a0c24tvs2xulzpcvvhm4z4sjxsc0rfvah",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v95k6agq60kjdpf9uh68nz32wayqdf7m9zgqzeqc64mdefstkmfj8",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyshpxd63rwpg7l9qt3atsfnf2mgw749zuz9sk5ytk5jtxctw66gt",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy2qapgq2m8f6rawzlh9f9e4haz0h6rxsk4rul6xec29rsc96c9nt",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v946mhp66he3x8vwltpakf9m3k4nrs85k6gpxg8pprhmhyq5n8erd",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyzngcwg46eemhu9uduvu7nwmjhzc5grnzl9dtftmhjf9fc8vqq7a",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8qfgyumu7n0tsje3m9aednwgm9vut79h8l02dr99rtjvssps5qr5",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyhcdseax6mjcrxz2c64p2czmgqtpvzptgtjhdlykm0ppmg8emn7s",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8qafj5c5yms4wcquvq6mznnhv9qdtpemr5y0dw9m885rqs2cjg7e",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v92gawsmqg5qguugclyearf2qrv6m9sjhsy20qdxp7a76dsg6yn5f",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxwpcgf27r7nnwf983zzc8zgh0mgh3jgdhugps7cvuy0mcgyzs9sa",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxe02c3trl78295wmdymgc02ep4l299t80msq4zk70dxtuckl9k29",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8kt5a9fu6emsqwn9pmkzxwf5cws8nnyk72nsseqldt7r2cc40gw2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxzh0n0kleyazj8uvla92vvxhydwrpmfnsnuq5paa45lk9smr9pxc",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9rw4mn2hlgcvhw96p25r98vgppk2xpyq78f3mrkufwhxncw6a0qs",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy02rescazffxy9447eh3pcgvy22kywdwatmp4ehu2cy5dgtwd2fr",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9csrpk0l9rh5y3xx0qwjpq97ag00cp3qunlgdwmzwfd0nqrqtqny",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxed6d24ug6h5xsvr5prnzsyur5ux38l2cw6rva84a4e9ccm42vm2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyqysc73p93ecrnea6jx98u09ueuq39kk52z0f57vzl5vjqqzdw3p",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v89tyleg3qxqg00u9qsvmykyy3dfutcl2qsu5wnsm2fj33q5rdr5m",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxq95kjh5yf6t4uy9ytlu5mzp6kgxa3wvszv5fzx99k92hc0d248y",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8mpmyf5fj2hgvfapgwc3g2tvw4revnpn4xy6ezrprsjencrsaudf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8qmyqyacms90zr5npww4zl3gh5sxe4afmzdzr6temtcw4surwdhx",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy074kt6eytqra6gh58ju70u76n5gujm09q6ej3hqpcw5gc9vhktm",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy3qlm7k4chn3p9zh37u0mpny420n5r7854yujc30lsyf7gk2ppyf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxv60se24f26v2xex66nnuqa2s2nrr0v3094uk0vwxhkjkc3mwljs",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyuxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yq8h7umy",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx7hsxtpw3vae52avvwy24j4xj7kpcvpxqzs4m24h0r8ngc9e6rd6",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9qw9xflglesswd8prfagn3e3rauu7hyn7cnd6fw7y2ht3gdah3qf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxu5sa6effs76vgayk9n5wfdaprmwt96g6wrfxaz7nhynncl3a9j2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vym7k0fkzfr6q6ykvd7wfdn35aqyx6mnewsh0ws2zdh7l5spt00my",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v99wq77g6t2jvmy420r22hqd028s7079p8ssgz45ehxnexqjg5qwx",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy7ptj37j2j09agtqa822fdqpf82e5ws2xtzd0xn8xeygpqu6pvqu",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxztq9lhj9k7v7r3ye930uvpwarc8cps53qjcq0q35t4glcx9a3m7",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy97tuy34tz42jg60dyft9qp89msyn9vsdd730nmemk5s4qzu5tjf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9qhhts5p86qj9ursda7y22rv5m0mcjsuqdct7gulnfkhps9ysqeg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy835wr2cgu7ypff304hana5j9c8nuald28ktldn53wzedsxxzwkv",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx8uckm9s4ty0ste2mk6tj77h0pcrfystmrmthns5nls8rqallrvy",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8jdrahgwxyc26ptdtfgm2qrrpath6p5wdhcrqtcj94vkts72czsg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyx0myhmrd7dj3l6zkyhmag7shmdd48yhylm34u2lud3pdcehesq2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy6sqevluqp7lftl88hup6h4pu3ggeexnwrmqkfvewtvuvsn9ftn5",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxtk0aguznvjqqatj9cfdx0xhmtp52hqxky87yusjsn34cc7kh3k6",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx48m9dn30hgm840g9s30yyjlv5dsqfh429xn89sskunr4q46q3yd",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8ecg4npdm76m8gdmnvnze4hukmgn7yy4au5ta7447kh4vq2pkt30",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx9j2tk307qzkkzk68x6h57r26fj802g9gja268r8z5umpgnql9fw",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9u6pzee8v733z6cptppjq6wyprztqpp58kzfaz8qypphdsummuyt",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9fwez477qgc9wm72c78e46q0nvfujcefqklsea4kdn784stk7ufq",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v957kxplc6pq8j7xajm2kcydn3cj8zf3a7u55swysah8ldq6narjd",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v98d5fszt89zk9fw4jjnuptk67n8z0707v8gqr03c88y8uc7plull",
                            "assets": []
                        }
                    ],
                    "metadata": null,
                    "depth": {
                        "quantity": 170,
                        "unit": "block"
                    },
                    "id": "1d9025cddb72f9e15510dff6e67d1d7718704f19d6b66f1f4232dc5847f921d4",
                    "deposit": {
                        "quantity": 0,
                        "unit": "lovelace"
                    },
                    "mint": []
                }
            ]
        },
        {
            "passphrase": "shelley-small-coins",
            "mnemonic_sentence": ["either", "flip", "maple", "shift", "dismiss", "bridge", "sweet", "reveal", "green", "tornado", "need", "patient", "wall", "stamp", "pass"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 43000000,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 43000000,
                    "unit": "lovelace"
                }
            },
            "name": "shelley-small-coins",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "60bb5513e4e262e445cf203db9cf73ba925064d2",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        },
        {
            "passphrase": "shelley-100-utxo",
            "mnemonic_sentence": ["radar", "scare", "sense", "winner", "little", "jeans", "blue", "spell", "mystery", "sketch", "omit", "time", "tiger", "leave", "load"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 10000100000000,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 10000100000000,
                    "unit": "lovelace"
                }
            },
            "name": "shelley-100-utxo",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "868d04759fd222ac776484888d4bcd462d146772",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        },
        {
            "passphrase": "icarus-500-address-index",
            "mnemonic_sentence": ["erosion", "ahead", "vibrant", "air", "day", "timber", "thunder", "general", "dice", "into", "chest", "enrich", "social", "neck", "shine"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 0,
                    "unit": "lovelace"
                }
            },
            "name": "icarus-500-address-index",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "9ada973fd29d6b3d096ab361ef5fd082576bdbe3",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        },
        {
            "passphrase": "ledger-1234567890",
            "mnemonic_sentence": ["vague", "wrist", "poet", "crazy", "danger", "dinner", "grace", "home", "naive", "unfold", "april", "exile", "relief", "rifle", "ranch", "tone", "betray", "wrong"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 0,
                    "unit": "lovelace"
                }
            },
            "name": "ledger-2",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "4ea40ca5323bad2efb77c68ae42e5bb7205ab5e6",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        }
    ];
    var utxoStats = {
        "distribution": {
            "10000000000000000": 0,
            "100000000000000": 0,
            "1000000000000": 0,
            "10000000000": 0,
            "100000000": 0,
            "1000000": 100,
            "10000": 0,
            "100": 0,
            "1000000000": 0,
            "100000000000": 100,
            "10": 0,
            "45000000000000000": 0,
            "1000": 0,
            "10000000000000": 0,
            "1000000000000000": 0,
            "100000": 0,
            "10000000": 0
        },
        "scale": "log10",
        "total": {
            "quantity": 10000100000000,
            "unit": "lovelace"
        }
    };
    var fee = {
        "estimated_min": {
            "quantity": 130500,
            "unit": "lovelace"
        },
        "deposit": {
            "quantity": 0,
            "unit": "lovelace"
        },
        "minimum_coins": [
            {
                "quantity": 1000000,
                "unit": "lovelace"
            }
        ],
        "estimated_max": {
            "quantity": 158700,
            "unit": "lovelace"
        }
    };
    var tx = {
        "status": "pending",
        "withdrawals": [],
        "amount": {
            "quantity": 1130500,
            "unit": "lovelace"
        },
        "inputs": [
            {
                "amount": {
                    "quantity": 12000000,
                    "unit": "lovelace",
                },
                "address": "addr1vxlassd5m5z2757zqkj9vsfyqnjpzqa79tfclypa5ltwtgcfsgk0y",
                "id": "d7700008431233698659a03ad6e0fe0baf00dddfc12c03c0a1a6bab42124652e",
                "assets": [],
                "index": 3,
            },
        ],
        "direction": "outgoing",
        "fee": {
            "quantity": 130500,
            "unit": "lovelace"
        },
        "outputs": [
            {
                "amount": {
                    "quantity": 1000000,
                    "unit": "lovelace"
                },
                "address": "addr1q99d7qnpvw53stx5ppave9n2aarwxar552v55p4xnhjy6me59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq9hd2f7",
                "assets": []
            },
            {
                "amount": {
                    "quantity": 10869500,
                    "unit": "lovelace"
                },
                "address": "addr1q8s2ev94k83lsctwyzj0kklgzlt02hv75z6cjqtpqxlafpq7vjhxlzaazkhgv47za494arh3lqhz997hat2vveuzlvfse80cay",
                "assets": []
            }
        ],
        "expires_at": {
            "time": "2021-04-01T00:14:55Z",
            "epoch_number": 728,
            "absolute_slot_number": 36440,
            "slot_number": 40
        },
        "pending_since": {
            "height": {
                "quantity": 190,
                "unit": "block"
            },
            "time": "2021-03-31T22:14:54.8Z",
            "epoch_number": 8,
            "absolute_slot_number": 439,
            "slot_number": 39
        },
        "metadata": null,
        "id": "99ed1d6c8c7f557d1631236e132c0ca73404a9928e47457204816065163cc967",
        "deposit": {
            "quantity": 0,
            "unit": "lovelace"
        },
        "mint": []
    };
    var poolMaintenanceAction = {
        "gc_stake_pools": {
            "status": "not_applicable"
        }
    };
    var delegationFee = {
        "estimated_min": {
            "quantity": 124800,
            "unit": "lovelace"
        },
        "deposit": {
            "quantity": 1000000,
            "unit": "lovelace"
        },
        "minimum_coins": [],
        "estimated_max": {
            "quantity": 153000,
            "unit": "lovelace"
        }
    };
    var afterDelegation = {
        "next": [],
        "active": {
            "status": "delegating",
            "target": "pool1as50x0wtumtyqzs7tceeh5ry0syh8jnvpnuu9wlxswxuv48sw4w"
        }
    };
    var poolStake = [
        {
            "flags": [],
            "metrics": {
                "saturation": 0.8769869515692323,
                "non_myopic_member_rewards": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "produced_blocks": {
                    "quantity": 286,
                    "unit": "block"
                },
                "relative_stake": {
                    "quantity": 29.23,
                    "unit": "percent"
                }
            },
            "retirement": {
                "epoch_start_time": "2021-07-31T11:51:50Z",
                "epoch_number": 1000000
            },
            "cost": {
                "quantity": 0,
                "unit": "lovelace"
            },
            "margin": {
                "quantity": 10,
                "unit": "percent"
            },
            "pledge": {
                "quantity": 1000000000000,
                "unit": "lovelace"
            },
            "id": "pool1hvg5evmawhaq2fsr9rprtg76u226x0gt5e62t6c78etgu2j7xtn"
        },
        {
            "flags": [],
            "metrics": {
                "saturation": 0.6474533657431686,
                "non_myopic_member_rewards": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "produced_blocks": {
                    "quantity": 298,
                    "unit": "block"
                },
                "relative_stake": {
                    "quantity": 21.58,
                    "unit": "percent"
                }
            },
            "cost": {
                "quantity": 0,
                "unit": "lovelace"
            },
            "margin": {
                "quantity": 10,
                "unit": "percent"
            },
            "pledge": {
                "quantity": 2000000000000,
                "unit": "lovelace"
            },
            "id": "pool1as50x0wtumtyqzs7tceeh5ry0syh8jnvpnuu9wlxswxuv48sw4w"
        },
        {
            "flags": [],
            "metrics": {
                "saturation": 0.8740602172660131,
                "non_myopic_member_rewards": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "produced_blocks": {
                    "quantity": 296,
                    "unit": "block"
                },
                "relative_stake": {
                    "quantity": 29.14,
                    "unit": "percent"
                }
            },
            "retirement": {
                "epoch_start_time": "2021-04-18T07:51:50Z",
                "epoch_number": 100000
            },
            "cost": {
                "quantity": 0,
                "unit": "lovelace"
            },
            "margin": {
                "quantity": 10,
                "unit": "percent"
            },
            "pledge": {
                "quantity": 1000000000000,
                "unit": "lovelace"
            },
            "id": "pool1k3tk3sdzmf9az04u4g0229qgak33mnppwewvh4q8ek5ly09nqjm"
        }
    ];
    var txRaw = {
        "type": "TxBodyMary",
        "description": "",
        "cborHex": "82a400818258202d7928a59fcba5bf71c40fe6428a301ffda4d2fa681e5357051970436462b89400018282583900c0e88694ab569f42453eb950fb4ec14cb50f4d5d26ac83fdec2c505d818bcebf1df51c84239805b8a330d68fdbc3c047c12bb4c3172cb9391a002b335f825839003d2d9ceb1a47bc1b62b7498ca496b16a7b4bbcc6d97ede81ba8621ebd6d947875fcf4845ef3a5f08dd5522581cf6de7b9c065379cbb3754d1a001e8480021a00029361031a01672b7ef6"
    };
    before('Initializing the test cluster ...', function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, w;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        walletServer = wallet_server_1.WalletServer.init("http://" + process.env.TEST_WALLET_HOST + ":" + process.env.TEST_WALLET_PORT + "/v2");
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < wallets.length - 1)) return [3 /*break*/, 4];
                        w = wallets[i];
                        return [4 /*yield*/, walletServer.createOrRestoreShelleyWallet(w.name, w.mnemonic_sentence, w.passphrase)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    });
    after('Cleaning the test cluster ...', function () {
        return __awaiter(this, void 0, void 0, function () {
            var list, i, wallet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, walletServer.wallets()];
                    case 1:
                        list = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < list.length)) return [3 /*break*/, 5];
                        wallet = list[i];
                        return [4 /*yield*/, wallet.delete()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    });
    describe('wallet', function () {
        it('should create a wallet', function () {
            return __awaiter(this, void 0, void 0, function () {
                var mnemonic_sentence, passphrase, name, wallet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mnemonic_sentence = utils_1.Seed.toMnemonicList(utils_1.Seed.generateRecoveryPhrase());
                            passphrase = 'tangocrypto';
                            name = 'tangocrypto-wallet';
                            return [4 /*yield*/, walletServer.createOrRestoreShelleyWallet(name, mnemonic_sentence, passphrase)];
                        case 1:
                            wallet = _a.sent();
                            expect(wallet.balance.total.quantity).equal(0);
                            expect(wallet.balance.available.quantity).equal(0);
                            expect(wallet.balance.reward.quantity).equal(0);
                            expect(wallet.name).equal(name);
                            expect(wallet.id).lengthOf(40);
                            expect(wallet.passphrase.last_updated_at).be.a('string');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should resotre a wallet", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets[wallets.length - 1];
                            return [4 /*yield*/, walletServer.createOrRestoreShelleyWallet(w.name, w.mnemonic_sentence, w.passphrase)];
                        case 1:
                            wallet = _a.sent();
                            expect(wallet.id).equal(w.id);
                            expect(wallet.name).equal(w.name);
                            expect(wallet.passphrase.last_updated_at).be.a('string');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should throw an 'wallet_already_exist' error", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets[0];
                            return [4 /*yield*/, expect(walletServer.createOrRestoreShelleyWallet(w.name, w.mnemonic_sentence, w.passphrase)).to.eventually.rejectedWith(Error)
                                    .and.have.nested.property('response.data.code').equal('wallet_already_exists')];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should get a list of wallets", function () {
            return __awaiter(this, void 0, void 0, function () {
                var ls, ids, i, id;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, walletServer.wallets()];
                        case 1:
                            ls = _a.sent();
                            ids = ls.map(function (w) { return w.id; });
                            expect(ls.length).least(wallets.length);
                            for (i = 0; i < wallets.length; i++) {
                                id = wallets[i].id;
                                expect(ids).include(id);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should get utxo wallet statistics", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, statistics;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '868d04759fd222ac776484888d4bcd462d146772'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getUtxoStatistics()];
                        case 2:
                            statistics = _a.sent();
                            expect(statistics).deep.equal(utxoStats);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should get a wallet", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id === '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            expect(wallet.id).equal(w.id);
                            expect(wallet.name).equal(w.name);
                            expect(wallet.passphrase.last_updated_at).be.a('string');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("shuld remove a wallet", function () {
            return __awaiter(this, void 0, void 0, function () {
                var ls, wallet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, walletServer.wallets()];
                        case 1:
                            ls = _a.sent();
                            wallet = ls.find(function (w) { return w.name == 'tangocrypto-wallet'; });
                            return [4 /*yield*/, wallet.delete()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, expect(walletServer.getShelleyWallet(wallet.id)).to.eventually.rejectedWith(Error)
                                    .and.have.nested.property('response.status').equal(404)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should rename a wallet", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, name, wallet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id === '60bb5513e4e262e445cf203db9cf73ba925064d2'; });
                            name = 'new-name';
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.rename(name)];
                        case 2:
                            wallet = _a.sent();
                            expect(wallet.name).equal(name);
                            return [4 /*yield*/, wallet.rename(w.name)];
                        case 3:
                            wallet = _a.sent();
                            expect(wallet.name).equal(w.name);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should change a wallet passphrase", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, newPassphrase, wallet, lastUpdatedAt;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id === '60bb5513e4e262e445cf203db9cf73ba925064d2'; });
                            newPassphrase = 'new-passphrase';
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            lastUpdatedAt = wallet.passphrase.last_updated_at;
                            return [4 /*yield*/, wallet.updatePassphrase(w.passphrase, newPassphrase)];
                        case 2:
                            wallet = _a.sent();
                            expect(wallet.passphrase.last_updated_at).not.equal(lastUpdatedAt);
                            return [4 /*yield*/, wallet.updatePassphrase(newPassphrase, w.passphrase)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe('address', function () {
        it('should get wallet addresses', function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, addresses;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id === '60bb5513e4e262e445cf203db9cf73ba925064d2'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = _a.sent();
                            expect(addresses.length).least(20);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get wallet unused addresses', function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, addresses;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id === '60bb5513e4e262e445cf203db9cf73ba925064d2'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getUnusedAddresses()];
                        case 2:
                            addresses = _a.sent();
                            expect(addresses).be.an('array');
                            expect(addresses).lengthOf.at.least(wallet.address_pool_gap);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get wallet used addresses', function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, addresses;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id === '60bb5513e4e262e445cf203db9cf73ba925064d2'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getUsedAddresses()];
                        case 2:
                            addresses = _a.sent();
                            expect(addresses).be.an('array');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get first wallet\'s address external verification key', function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, addr, wallet, address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = '2a793eb367d44a42f658eb02d1004f50c14612fd';
                            addr = 'addr_vk1rfx8dy8dh3t04234qu98gcuu9sqenpvzqx506tfwh9c26vd02fwqmx69lx';
                            return [4 /*yield*/, walletServer.getShelleyWallet(id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddressExternalVerificationKey(0)];
                        case 2:
                            address = _a.sent();
                            expect(address.key).equal(addr);
                            expect(address.role).equal(key_wallet_1.KeyRoleEnum.AddressExternal);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get first wallet\'s stake verification key', function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, addr, wallet, stake;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = '2a793eb367d44a42f658eb02d1004f50c14612fd';
                            addr = 'stake_vk1jj0une4hu8sjaye6cdw7tft9eynykzk9kccmfadzz4ytcmt9v9hs2k6s7u';
                            return [4 /*yield*/, walletServer.getShelleyWallet(id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getStakeVerificationKey(0)];
                        case 2:
                            stake = _a.sent();
                            expect(stake).have.property('key').equal(addr);
                            expect(stake).have.property('role').equal(key_wallet_1.KeyRoleEnum.Stake);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get wallet next unused address', function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, addr, wallet, addresses, address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = '4ea40ca5323bad2efb77c68ae42e5bb7205ab5e6';
                            addr = 'addr1q99q78gt2898zgu2dcswf2yuxj6vujcqece38rycc7wsncl5lx8y8swrhrt93dt5kykkhtd57gpc0hc8820vh6cy8n6su9tsj8';
                            return [4 /*yield*/, walletServer.getShelleyWallet(id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = (_a.sent()).map(function (addr) { return addr.address; });
                            return [4 /*yield*/, wallet.getNextAddress()];
                        case 3:
                            address = _a.sent();
                            expect(address.address).equal(addr);
                            expect(address.used()).equal(false);
                            expect(addresses).not.include(address.address);
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe('stake pool', function () {
        it("should return stake pool ranking list by member rewards", function () {
            return __awaiter(this, void 0, void 0, function () {
                var stake, pools, rewards;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            stake = 1000000000;
                            return [4 /*yield*/, walletServer.getStakePools(stake)];
                        case 1:
                            pools = _a.sent();
                            rewards = pools.map(function (p) { return p.metrics.non_myopic_member_rewards.quantity; });
                            expect(rewards).equal(rewards.sort().reverse());
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should return stake pools maintenance actions", function () {
            return __awaiter(this, void 0, void 0, function () {
                var maintenanceActions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, walletServer.stakePoolMaintenanceActions()];
                        case 1:
                            maintenanceActions = _a.sent();
                            expect(maintenanceActions).deep.equal(poolMaintenanceAction);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should trigger garbage collection", function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, walletServer.triggerStakePoolGarbageCollection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should estimate delegation fee", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, fee;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '868d04759fd222ac776484888d4bcd462d146772'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.estimateDelegationFee()];
                        case 2:
                            fee = _a.sent();
                            expect(fee).deep.equal(delegationFee);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should delegate to stake pool", function () {
            return __awaiter(this, void 0, void 0, function () {
                var pool, w, wallet, transaction, inputAmount, outputAmount, spent, epoch, delegation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, walletServer.getStakePools()];
                        case 1:
                            pool = (_a.sent()).find(function (p) { return p.id == 'pool1as50x0wtumtyqzs7tceeh5ry0syh8jnvpnuu9wlxswxuv48sw4w'; });
                            w = wallets.find(function (w) { return w.id == '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 2:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.delegate(pool.id, w.passphrase)];
                        case 3:
                            transaction = _a.sent();
                            inputAmount = transaction.inputs.map(function (i) { return i.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            outputAmount = transaction.outputs.map(function (o) { return o.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            spent = transaction.amount.quantity;
                            expect(models_1.ApiTransactionStatusEnum.Pending).equal(transaction.status);
                            expect(models_1.ApiTransactionDirectionEnum.Outgoing).equal(transaction.direction);
                            expect(outputAmount + spent).equal(inputAmount);
                            return [4 /*yield*/, waitUntilTxFinish(transaction.id, wallet)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, wallet.getTransaction(transaction.id)];
                        case 5:
                            transaction = _a.sent();
                            if (!(transaction.status == models_1.ApiTransactionStatusEnum.InLedger)) return [3 /*break*/, 10];
                            return [4 /*yield*/, wallet.refresh()];
                        case 6:
                            _a.sent();
                            if (!(wallet.delegation.next.length > 0)) return [3 /*break*/, 9];
                            epoch = wallet.delegation.next.sort(function (a, b) { return -(a.changes_at.epoch_number - b.changes_at.epoch_number); }).map(function (d) { return d.changes_at.epoch_number; })[0];
                            return [4 /*yield*/, waitUntilEpoch(epoch, walletServer)];
                        case 7:
                            _a.sent();
                            return [4 /*yield*/, wallet.refresh()];
                        case 8:
                            _a.sent();
                            _a.label = 9;
                        case 9:
                            delegation = wallet.getDelegation();
                            expect(delegation).deep.equal(afterDelegation);
                            _a.label = 10;
                        case 10: return [2 /*return*/];
                    }
                });
            });
        });
        it("should withdraw wallet rewards", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, addresses, amounts, availableBalance, transaction, inputAmount, outputAmount, fee, newAvailableBalance;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getUsedAddresses()];
                        case 2:
                            addresses = (_a.sent()).slice(0, 1);
                            amounts = [wallet.getRewardBalance()];
                            availableBalance = wallet.getAvailableBalance();
                            return [4 /*yield*/, wallet.withdraw(w.passphrase, addresses, amounts)];
                        case 3:
                            transaction = _a.sent();
                            inputAmount = transaction.inputs.map(function (i) { return i.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            outputAmount = transaction.outputs.map(function (o) { return o.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            fee = transaction.fee.quantity;
                            expect(models_1.ApiTransactionStatusEnum.Pending).equal(transaction.status);
                            expect(models_1.ApiTransactionDirectionEnum.Outgoing).equal(transaction.direction);
                            expect(outputAmount + fee).equal(inputAmount);
                            return [4 /*yield*/, waitUntilTxFinish(transaction.id, wallet)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, wallet.getTransaction(transaction.id)];
                        case 5:
                            transaction = _a.sent();
                            if (!(transaction.status == models_1.ApiTransactionStatusEnum.InLedger)) return [3 /*break*/, 7];
                            return [4 /*yield*/, wallet.refresh()];
                        case 6:
                            _a.sent();
                            newAvailableBalance = wallet.getAvailableBalance() + fee;
                            expect(availableBalance + amounts[0]).equal(newAvailableBalance);
                            _a.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        });
        it("should stop delegating", function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, transaction, inputAmount, outputAmount, amount, epoch, delegation, rewards;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.stopDelegation(w.passphrase)];
                        case 2:
                            transaction = _a.sent();
                            inputAmount = transaction.inputs.map(function (i) { return i.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            outputAmount = transaction.outputs.map(function (o) { return o.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            amount = transaction.amount.quantity;
                            expect(models_1.ApiTransactionStatusEnum.Pending).equal(transaction.status);
                            expect(models_1.ApiTransactionDirectionEnum.Incoming).equal(transaction.direction);
                            expect(amount + inputAmount).equal(outputAmount);
                            return [4 /*yield*/, waitUntilTxFinish(transaction.id, wallet)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, wallet.getTransaction(transaction.id)];
                        case 4:
                            transaction = _a.sent();
                            if (!(transaction.status == models_1.ApiTransactionStatusEnum.InLedger)) return [3 /*break*/, 9];
                            return [4 /*yield*/, wallet.refresh()];
                        case 5:
                            _a.sent();
                            if (!(wallet.delegation.next.length > 0)) return [3 /*break*/, 8];
                            epoch = wallet.delegation.next.sort(function (a, b) { return -(a.changes_at.epoch_number - b.changes_at.epoch_number); }).map(function (d) { return d.changes_at.epoch_number; })[0];
                            return [4 /*yield*/, waitUntilEpoch(epoch, walletServer)];
                        case 6:
                            _a.sent();
                            return [4 /*yield*/, wallet.refresh()];
                        case 7:
                            _a.sent();
                            _a.label = 8;
                        case 8:
                            delegation = wallet.getDelegation();
                            rewards = wallet.getRewardBalance();
                            expect(rewards).equal(0);
                            expect(delegation.active.status).equal(models_1.WalletsDelegationActiveStatusEnum.NotDelegating);
                            _a.label = 9;
                        case 9: return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe('transaction', function () {
        var tx = null;
        it('should get tx list', function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, start, end, transactions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            start = new Date(2021, 0, 1);
                            end = new Date(Date.now());
                            return [4 /*yield*/, wallet.getTransactions(start, end)];
                        case 2:
                            transactions = _a.sent();
                            tx = transactions[0];
                            transactions.filter(function (tx) { return tx.metadata; }).forEach(function (t) {
                                var metadata = utils_1.Seed.reverseMetadata(t.metadata, "array");
                                expect(metadata).not.empty;
                            });
                            expect(transactions).be.an('array');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get tx details', function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, wallet, transaction;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getTransaction(tx.id)];
                        case 2:
                            transaction = _a.sent();
                            expect(tx.id).equal(transaction.id);
                            expect(tx.status).equal(transaction.status);
                            expect(tx.direction).equal(transaction.direction);
                            expect(tx.depth.unit).equal(transaction.depth.unit);
                            expect(tx.fee).deep.equal(transaction.fee);
                            expect(tx.deposit).deep.equal(transaction.deposit);
                            expect(tx.inputs).deep.equal(transaction.inputs);
                            expect(tx.outputs).deep.equal(transaction.outputs);
                            expect(tx.mint).deep.equal(transaction.mint);
                            expect(tx.amount).deep.equal(transaction.amount);
                            expect(tx.withdrawals).deep.equal(transaction.withdrawals);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get payment fee', function () {
            return __awaiter(this, void 0, void 0, function () {
                var receiver, payeer, rWallet, addresses, amounts, wallet, estimatedFees;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            receiver = '9ada973fd29d6b3d096ab361ef5fd082576bdbe3';
                            payeer = '2a793eb367d44a42f658eb02d1004f50c14612fd';
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver)];
                        case 1:
                            rWallet = _a.sent();
                            return [4 /*yield*/, rWallet.getUnusedAddresses()];
                        case 2:
                            addresses = (_a.sent()).slice(0, 1);
                            amounts = [1000000];
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer)];
                        case 3:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.estimateFee(addresses, amounts)];
                        case 4:
                            estimatedFees = _a.sent();
                            expect(estimatedFees).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should send a payment transfer', function () {
            return __awaiter(this, void 0, void 0, function () {
                var receiver, payeer, passphrase, rWallet, addresses, amounts, wallet, transaction, output, inputAmount, outputAmount, fee, spent, paid;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            receiver = '2a793eb367d44a42f658eb02d1004f50c14612fd';
                            payeer = '60bb5513e4e262e445cf203db9cf73ba925064d2';
                            passphrase = 'shelley-small-coins';
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver)];
                        case 1:
                            rWallet = _a.sent();
                            return [4 /*yield*/, rWallet.getUsedAddresses()];
                        case 2:
                            addresses = (_a.sent()).slice(0, 1);
                            amounts = [1000000];
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer)];
                        case 3:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.sendPayment(passphrase, addresses, amounts)];
                        case 4:
                            transaction = _a.sent();
                            output = transaction.outputs.find(function (o) { return o.address == addresses[0].address; });
                            inputAmount = transaction.inputs.map(function (i) { return i.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            outputAmount = transaction.outputs.map(function (o) { return o.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            fee = transaction.fee.quantity;
                            spent = output.amount.quantity + fee;
                            paid = amounts.reduce(function (a, b) { return a + b; });
                            expect(output).to.not.undefined;
                            expect(output.amount.quantity).equal(paid);
                            expect(spent).equal(transaction.amount.quantity);
                            expect(outputAmount + fee).equal(inputAmount);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should send a payment transfer with complex metadata', function () {
            return __awaiter(this, void 0, void 0, function () {
                var receiver, payeer, passphrase, rWallet, addresses, amounts, wallet, metadata, transaction, output, inputAmount, outputAmount, fee, spent, paid;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            receiver = '2a793eb367d44a42f658eb02d1004f50c14612fd';
                            payeer = '60bb5513e4e262e445cf203db9cf73ba925064d2';
                            passphrase = 'shelley-small-coins';
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver)];
                        case 1:
                            rWallet = _a.sent();
                            return [4 /*yield*/, rWallet.getUsedAddresses()];
                        case 2:
                            addresses = (_a.sent()).slice(0, 1);
                            amounts = [1000000];
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer)];
                        case 3:
                            wallet = _a.sent();
                            metadata = { 0: 'hello', 1: Buffer.from('2512a00e9653fe49a44a5886202e24d77eeb998f', 'hex'), 4: [1, 2, { 0: true }], 5: { 'key': null, 'l': [3, true, {}] }, 6: undefined };
                            return [4 /*yield*/, wallet.sendPayment(passphrase, addresses, amounts, metadata)];
                        case 4:
                            transaction = _a.sent();
                            output = transaction.outputs.find(function (o) { return o.address == addresses[0].address; });
                            inputAmount = transaction.inputs.map(function (i) { return i.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            outputAmount = transaction.outputs.map(function (o) { return o.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            fee = transaction.fee.quantity;
                            spent = output.amount.quantity + fee;
                            paid = amounts.reduce(function (a, b) { return a + b; });
                            expect(output).to.not.undefined;
                            expect(output.amount.quantity).equal(paid);
                            expect(spent).equal(transaction.amount.quantity);
                            expect(outputAmount + fee).equal(inputAmount);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get coin selection', function () {
            return __awaiter(this, void 0, void 0, function () {
                var w, receiver, wallet, addresses, amounts, coins, inputAmount, outputAmount, changeAmount;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            w = wallets.find(function (w) { return w.id == '2a793eb367d44a42f658eb02d1004f50c14612fd'; });
                            receiver = wallets.find(function (w) { return w.id == '60bb5513e4e262e445cf203db9cf73ba925064d2'; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(w.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver.id)];
                        case 2: return [4 /*yield*/, (_a.sent()).getUsedAddresses()];
                        case 3:
                            addresses = (_a.sent()).slice(0, 1);
                            amounts = [5000000];
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts)];
                        case 4:
                            coins = _a.sent();
                            inputAmount = coins.inputs.map(function (i) { return i.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            outputAmount = coins.outputs.map(function (o) { return o.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            changeAmount = coins.change.map(function (c) { return c.amount.quantity; }).reduce(function (a, b) { return a + b; });
                            expect(inputAmount).least(outputAmount + changeAmount);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should send a offline signed payment transaction", function () {
            return __awaiter(this, void 0, void 0, function () {
                var receiver, payeer, wallet, addresses, amounts, info, data, coinSelection, rootKey, signingKeys, metadata, txBuild, txBody, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            receiver = '2a793eb367d44a42f658eb02d1004f50c14612fd';
                            payeer = wallets.find(function (w) { return w.id == "60bb5513e4e262e445cf203db9cf73ba925064d2"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver)];
                        case 2: return [4 /*yield*/, (_a.sent()).getUnusedAddresses()];
                        case 3:
                            addresses = (_a.sent()).slice(0, 1);
                            amounts = [1000000];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 4:
                            info = _a.sent();
                            data = { 0: 'hello', 1: Buffer.from('2512a00e9653fe49a44a5886202e24d77eeb998f', 'hex'), 4: [1, 2, { 0: true }], 5: { 'key': null, 'l': [3, true, {}] }, 6: undefined };
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts, data)];
                        case 5:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            metadata = utils_1.Seed.buildTransactionMetadata(data);
                            txBuild = utils_1.Seed.buildTransaction(coinSelection, info.node_tip.absolute_slot_number * 12000, { metadata: metadata, config: config_1.Config.LocalCluster });
                            txBody = utils_1.Seed.sign(txBuild, signingKeys, metadata);
                            signed = Buffer.from(txBody.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 6:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
function waitUntilTxFinish(txId, wallet) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                    var tx;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tx = { status: models_1.ApiTransactionStatusEnum.Pending };
                                _a.label = 1;
                            case 1: return [4 /*yield*/, delay(1)];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, wallet.getTransaction(txId)];
                            case 3:
                                tx = _a.sent();
                                _a.label = 4;
                            case 4:
                                if (tx.status == models_1.ApiTransactionStatusEnum.Pending) return [3 /*break*/, 1];
                                _a.label = 5;
                            case 5:
                                resolve();
                                return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
;
function waitUntilEpoch(epoch, server) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                    var information, info;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                information = { epoch_number: 0 };
                                _a.label = 1;
                            case 1: return [4 /*yield*/, delay(1)];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, server.getNetworkInformation()];
                            case 3:
                                info = _a.sent();
                                information.epoch_number = info.node_tip.epoch_number;
                                _a.label = 4;
                            case 4:
                                if (information.epoch_number < epoch) return [3 /*break*/, 1];
                                _a.label = 5;
                            case 5:
                                resolve();
                                return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
function delay(time) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    setTimeout(function () { resolve(); }, time * 1000);
                })];
        });
    });
}

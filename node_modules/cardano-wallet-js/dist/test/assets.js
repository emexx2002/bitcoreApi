"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
chai.use(chaiAsPromised);
var expect = chai.expect;
require("mocha");
var models_1 = require("../models");
var utils_1 = require("../utils");
var wallet_server_1 = require("../wallet-server");
var dotenv = require("dotenv");
var asset_wallet_1 = require("../wallet/asset-wallet");
var token_wallet_1 = require("../wallet/token-wallet");
var config_1 = require("../config");
dotenv.config();
describe('Cardano asset tokens', function () {
    this.timeout(0);
    var walletServer;
    var tangoPolicyId = '';
    var wallets = [
        {
            "passphrase": "shellley-no-delegation",
            "mnemonic_sentence": ["over", "decorate", "flock", "badge", "beauty", "stamp", "chest", "owner", "excess", "omit", "bid", "raccoon", "spin", "reduce", "rival"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 100000000000,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 100000000000,
                    "unit": "lovelace"
                }
            },
            "name": "shelley-no-delegation",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "2a793eb367d44a42f658eb02d1004f50c14612fd",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            },
            "txs": [
                {
                    "inserted_at": {
                        "height": {
                            "quantity": 9,
                            "unit": "block"
                        },
                        "time": "2021-03-31T22:28:15.2Z",
                        "epoch_number": 1,
                        "absolute_slot_number": 66,
                        "slot_number": 16
                    },
                    "status": "in_ledger",
                    "withdrawals": [],
                    "amount": {
                        "quantity": 100000000000,
                        "unit": "lovelace"
                    },
                    "inputs": [
                        {
                            "id": "1669654d59d76084dfd7c14a0960d3de56f81d24e5a19351853ea0be434b3ed1",
                            "index": 0
                        }
                    ],
                    "direction": "incoming",
                    "fee": {
                        "quantity": 0,
                        "unit": "lovelace"
                    },
                    "outputs": [
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9m7qqkehg8y08wkw0p8qrnkrsqdj4tew78r7vqt0e4rfyg6e628h",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxk7zajwxrj7d63d857leyr5xjns5eqwu90t7av9s3qansgy3n03h",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxzfrx9fqmr9rksy3d3p5dt4s7kuzvxecptp4g6k6jyjf0c4wqrqv",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9fgg22y8zg9ew0sr8zecem3awlp8y2nkz06pj9rp0jze2g8yaz8s",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxqxrkn4m9gkkw9zjxv0ucclakl9yk0mf58szfnexv6gp4cqd8lmc",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxyh67eruv8lk7j5cd4uxxlwzhh5s37agmq82g8yly8d6ysgvf36v",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8fh0twhfl8asg2umdrghc0atawtlsvgtn4w2em5cdka5nq9htxna",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9jxt6pyruyjp09hcgmfz842cewgd76rft7kc2th7xaq74qfcrflh",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vynncsy67q5gzuextklwhgg7fqesm28lk7k3tryy4j9cmfsepfas7",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxwghnp98zdnqwxhsjccm4w7kcz5u5cazhe6f3dyes4g7pgf6f5lp",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8kjvptz7htc03uck4a6s78cvuetqgwhqyt5kf7mtleta8ce94xxu",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxy82rpx84s58vy74y34gy88lw0x0hvttuap6599nujp3cgdqvwsh",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8twacd3svulf74kxg4us59yrvp3lt4ajvl90w3u8vdjx2cajgkgy",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxwz08f2nd28eagctmpfxzcv8xn5lg8d4wjpx20ypfn93zcs8uucg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx9n2zkkgc6gqy2j3kkyfxjf27mtm98lx0vnwhj5jz5uasq9yl5hk",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9zsagjclpwam9p6humeg87x7r8r268kf5k8h5kun0sh3rgs7536w",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyjqralj63q5xyw03sxxeyc8svfk3ymrw2gwj79p0p00lxcapajam",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx7r3cy4uanwjgqjyttnymqkqsrt448ezylrkkdvqrjzxzssn75lu",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vydvk9kl2tqf5wkxajalkgf8kemjak3glhrm4d5l99jwhysfqx5ts",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy7qf5ctc8ydaz0d0g8dwy05eq8d4mtenlz377mzpec45sgk3f5q0",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9c36pmak8t8a8ra8jz347rmv3vxxq4mvc3ccmn9aez9glgq5mwq6",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy3f4vhj8xt9x8t93np94uak2kptltuw2spr0a7jy0jnftgzskwy5",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8y20cs4h8n4jcf6fgpkf9yea35r8sawazk7r7rktf9w2hssz5yu7",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v94ywg549gh0zs4g9fmty4tgm0cq5a95lsm29lccpezks3qf9w3hg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v876apusu8nfs6d6apgmj6vp5lcjjxmlvlc2sj9y98wtv5c7qc2yq",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxyht88xde2nj25wfm63a0c24tvs2xulzpcvvhm4z4sjxsc0rfvah",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v95k6agq60kjdpf9uh68nz32wayqdf7m9zgqzeqc64mdefstkmfj8",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyshpxd63rwpg7l9qt3atsfnf2mgw749zuz9sk5ytk5jtxctw66gt",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy2qapgq2m8f6rawzlh9f9e4haz0h6rxsk4rul6xec29rsc96c9nt",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v946mhp66he3x8vwltpakf9m3k4nrs85k6gpxg8pprhmhyq5n8erd",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyzngcwg46eemhu9uduvu7nwmjhzc5grnzl9dtftmhjf9fc8vqq7a",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8qfgyumu7n0tsje3m9aednwgm9vut79h8l02dr99rtjvssps5qr5",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyhcdseax6mjcrxz2c64p2czmgqtpvzptgtjhdlykm0ppmg8emn7s",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8qafj5c5yms4wcquvq6mznnhv9qdtpemr5y0dw9m885rqs2cjg7e",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v92gawsmqg5qguugclyearf2qrv6m9sjhsy20qdxp7a76dsg6yn5f",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxwpcgf27r7nnwf983zzc8zgh0mgh3jgdhugps7cvuy0mcgyzs9sa",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxe02c3trl78295wmdymgc02ep4l299t80msq4zk70dxtuckl9k29",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8kt5a9fu6emsqwn9pmkzxwf5cws8nnyk72nsseqldt7r2cc40gw2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxzh0n0kleyazj8uvla92vvxhydwrpmfnsnuq5paa45lk9smr9pxc",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9rw4mn2hlgcvhw96p25r98vgppk2xpyq78f3mrkufwhxncw6a0qs",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy02rescazffxy9447eh3pcgvy22kywdwatmp4ehu2cy5dgtwd2fr",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9csrpk0l9rh5y3xx0qwjpq97ag00cp3qunlgdwmzwfd0nqrqtqny",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxed6d24ug6h5xsvr5prnzsyur5ux38l2cw6rva84a4e9ccm42vm2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyqysc73p93ecrnea6jx98u09ueuq39kk52z0f57vzl5vjqqzdw3p",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v89tyleg3qxqg00u9qsvmykyy3dfutcl2qsu5wnsm2fj33q5rdr5m",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxq95kjh5yf6t4uy9ytlu5mzp6kgxa3wvszv5fzx99k92hc0d248y",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8mpmyf5fj2hgvfapgwc3g2tvw4revnpn4xy6ezrprsjencrsaudf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8qmyqyacms90zr5npww4zl3gh5sxe4afmzdzr6temtcw4surwdhx",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy074kt6eytqra6gh58ju70u76n5gujm09q6ej3hqpcw5gc9vhktm",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 1000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy3qlm7k4chn3p9zh37u0mpny420n5r7854yujc30lsyf7gk2ppyf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxv60se24f26v2xex66nnuqa2s2nrr0v3094uk0vwxhkjkc3mwljs",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyuxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yq8h7umy",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx7hsxtpw3vae52avvwy24j4xj7kpcvpxqzs4m24h0r8ngc9e6rd6",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9qw9xflglesswd8prfagn3e3rauu7hyn7cnd6fw7y2ht3gdah3qf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxu5sa6effs76vgayk9n5wfdaprmwt96g6wrfxaz7nhynncl3a9j2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vym7k0fkzfr6q6ykvd7wfdn35aqyx6mnewsh0ws2zdh7l5spt00my",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v99wq77g6t2jvmy420r22hqd028s7079p8ssgz45ehxnexqjg5qwx",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy7ptj37j2j09agtqa822fdqpf82e5ws2xtzd0xn8xeygpqu6pvqu",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxztq9lhj9k7v7r3ye930uvpwarc8cps53qjcq0q35t4glcx9a3m7",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy97tuy34tz42jg60dyft9qp89msyn9vsdd730nmemk5s4qzu5tjf",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9qhhts5p86qj9ursda7y22rv5m0mcjsuqdct7gulnfkhps9ysqeg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy835wr2cgu7ypff304hana5j9c8nuald28ktldn53wzedsxxzwkv",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx8uckm9s4ty0ste2mk6tj77h0pcrfystmrmthns5nls8rqallrvy",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8jdrahgwxyc26ptdtfgm2qrrpath6p5wdhcrqtcj94vkts72czsg",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vyx0myhmrd7dj3l6zkyhmag7shmdd48yhylm34u2lud3pdcehesq2",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vy6sqevluqp7lftl88hup6h4pu3ggeexnwrmqkfvewtvuvsn9ftn5",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vxtk0aguznvjqqatj9cfdx0xhmtp52hqxky87yusjsn34cc7kh3k6",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx48m9dn30hgm840g9s30yyjlv5dsqfh429xn89sskunr4q46q3yd",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v8ecg4npdm76m8gdmnvnze4hukmgn7yy4au5ta7447kh4vq2pkt30",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1vx9j2tk307qzkkzk68x6h57r26fj802g9gja268r8z5umpgnql9fw",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9u6pzee8v733z6cptppjq6wyprztqpp58kzfaz8qypphdsummuyt",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v9fwez477qgc9wm72c78e46q0nvfujcefqklsea4kdn784stk7ufq",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v957kxplc6pq8j7xajm2kcydn3cj8zf3a7u55swysah8ldq6narjd",
                            "assets": []
                        },
                        {
                            "amount": {
                                "quantity": 100000000000,
                                "unit": "lovelace"
                            },
                            "address": "addr1v98d5fszt89zk9fw4jjnuptk67n8z0707v8gqr03c88y8uc7plull",
                            "assets": []
                        }
                    ],
                    "metadata": null,
                    "depth": {
                        "quantity": 170,
                        "unit": "block"
                    },
                    "id": "1d9025cddb72f9e15510dff6e67d1d7718704f19d6b66f1f4232dc5847f921d4",
                    "deposit": {
                        "quantity": 0,
                        "unit": "lovelace"
                    },
                    "mint": []
                }
            ]
        },
        {
            "passphrase": "shelley-small-coins",
            "mnemonic_sentence": ["either", "flip", "maple", "shift", "dismiss", "bridge", "sweet", "reveal", "green", "tornado", "need", "patient", "wall", "stamp", "pass"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 43000000,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 43000000,
                    "unit": "lovelace"
                }
            },
            "name": "shelley-small-coins",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "60bb5513e4e262e445cf203db9cf73ba925064d2",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        },
        {
            "passphrase": "shelley-100-utxo",
            "mnemonic_sentence": ["radar", "scare", "sense", "winner", "little", "jeans", "blue", "spell", "mystery", "sketch", "omit", "time", "tiger", "leave", "load"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 10000100000000,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 10000100000000,
                    "unit": "lovelace"
                }
            },
            "name": "shelley-100-utxo",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "868d04759fd222ac776484888d4bcd462d146772",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        },
        {
            "passphrase": "icarus-500-address-index",
            "mnemonic_sentence": ["erosion", "ahead", "vibrant", "air", "day", "timber", "thunder", "general", "dice", "into", "chest", "enrich", "social", "neck", "shine"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 0,
                    "unit": "lovelace"
                }
            },
            "name": "icarus-500-address-index",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "9ada973fd29d6b3d096ab361ef5fd082576bdbe3",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        },
        {
            "passphrase": "ledger-1234567890",
            "mnemonic_sentence": ["vague", "wrist", "poet", "crazy", "danger", "dinner", "grace", "home", "naive", "unfold", "april", "exile", "relief", "rifle", "ranch", "tone", "betray", "wrong"],
            "address_pool_gap": 20,
            "state": {
                "status": "ready"
            },
            "balance": {
                "reward": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "total": {
                    "quantity": 0,
                    "unit": "lovelace"
                },
                "available": {
                    "quantity": 0,
                    "unit": "lovelace"
                }
            },
            "name": "ledger-2",
            "delegation": {
                "next": [],
                "active": {
                    "status": "not_delegating"
                }
            },
            "id": "4ea40ca5323bad2efb77c68ae42e5bb7205ab5e6",
            "tip": {
                "height": {
                    "quantity": 15010,
                    "unit": "block"
                },
                "time": "2021-03-31T14:17:56.2Z",
                "epoch_number": 590,
                "absolute_slot_number": 29511,
                "slot_number": 11
            },
            "assets": {
                "total": [],
                "available": []
            }
        }
    ];
    var coinSelectiontx = {
        "withdrawals": [],
        "inputs": [
            {
                "amount": {
                    "quantity": 5000000,
                    "unit": models_1.WalletswalletIdpaymentfeesAmountUnitEnum.Lovelace
                },
                "address": "addr1q8a8ywtvzaqm7q3egvzycasxnnt94fgsv436gx5y69ez4dc7vjhxlzaazkhgv47za494arh3lqhz997hat2vveuzlvfs84qlsh",
                "id": "d7700008431233698659a03ad6e0fe0baf00dddfc12c03c0a1a6bab42124652e",
                "derivation_path": [
                    "1852H",
                    "1815H",
                    "0H",
                    "1",
                    "5"
                ],
                "assets": [],
                "index": 5
            },
        ],
        "deposits": [],
        "change": [
            {
                "amount": {
                    "quantity": 2000000,
                    "unit": models_1.WalletswalletIdpaymentfeesAmountUnitEnum.Lovelace
                },
                "address": "addr1qx2etfhpx2zegfzsl2l2ts5x6rkc7dwwhkxvyngn8pg29cs7vjhxlzaazkhgv47za494arh3lqhz997hat2vveuzlvfstr8fa6",
                "derivation_path": [
                    "1852H",
                    "1815H",
                    "0H",
                    "1",
                    "0"
                ],
                "assets": []
            }
        ],
        "outputs": [
            {
                "amount": {
                    "quantity": 2000000,
                    "unit": models_1.WalletswalletIdpaymentfeesAmountUnitEnum.Lovelace
                },
                "address": "addr1q9rcrtzc37hk92ka5zjcfeqml9mkud0c8tcgpqqd362stcq7vjhxlzaazkhgv47za494arh3lqhz997hat2vveuzlvfspzhcng",
                "assets": []
            }
        ]
    };
    before('Initializing the test cluster ...', function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, w;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        walletServer = wallet_server_1.WalletServer.init("http://" + process.env.TEST_WALLET_HOST + ":" + process.env.TEST_WALLET_PORT + "/v2");
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < wallets.length - 1)) return [3 /*break*/, 4];
                        w = wallets[i];
                        return [4 /*yield*/, walletServer.createOrRestoreShelleyWallet(w.name, w.mnemonic_sentence, w.passphrase)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    });
    after('Cleaning the test cluster ...', function () {
        return __awaiter(this, void 0, void 0, function () {
            var list, i, wallet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, walletServer.wallets()];
                    case 1:
                        list = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < list.length)) return [3 /*break*/, 5];
                        wallet = list[i];
                        return [4 /*yield*/, wallet.delete()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    });
    describe('asset tokens', function () {
        it("should create a policy Id", function () {
            var keyPair = utils_1.Seed.generateKeyPair();
            var policyVKey = keyPair.publicKey;
            var policySKey = keyPair.privateKey;
            var keyHash = utils_1.Seed.getKeyHash(policyVKey);
            var script = utils_1.Seed.buildSingleIssuerScript(keyHash);
            var scriptHash = utils_1.Seed.getScriptHash(script);
            var policyId = utils_1.Seed.getPolicyId(scriptHash);
            expect(policyId).length(56);
        });
        it("should mint single issuer 1000000 Tango token", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, addresses, keyPair, policyVKey, policySKey, keyHash, script, scriptHash, data, tokenData, asset, tokens, scripts, minAda, amounts, info, ttl, coinSelection, rootKey, signingKeys, metadata, txBody, tx, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = [(_a.sent())[0]];
                            keyPair = utils_1.Seed.generateKeyPair();
                            policyVKey = keyPair.publicKey;
                            policySKey = keyPair.privateKey;
                            keyHash = utils_1.Seed.getKeyHash(policyVKey);
                            script = utils_1.Seed.buildSingleIssuerScript(keyHash);
                            scriptHash = utils_1.Seed.getScriptHash(script);
                            tangoPolicyId = utils_1.Seed.getPolicyId(scriptHash);
                            data = {};
                            tokenData = {};
                            tokenData[tangoPolicyId] = {
                                Tango: {
                                    arweaveId: "arweave-id",
                                    ipfsId: "ipfs-id",
                                    name: "Tango",
                                    description: "Tango crypto coin",
                                    type: "Coin"
                                }
                            };
                            data[0] = tokenData;
                            asset = new asset_wallet_1.AssetWallet(tangoPolicyId, "Tango", 1000000);
                            tokens = [new token_wallet_1.TokenWallet(asset, script, [keyPair])];
                            scripts = tokens.map(function (t) { return t.script; });
                            minAda = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            amounts = [minAda];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 3:
                            info = _a.sent();
                            ttl = info.node_tip.absolute_slot_number * 12000;
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts, data)];
                        case 4:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            // add policy signing keys
                            tokens.filter(function (t) { return t.scriptKeyPairs; }).forEach(function (t) { return signingKeys.push.apply(signingKeys, t.scriptKeyPairs.map(function (k) { return k.privateKey.to_raw_key(); })); });
                            metadata = utils_1.Seed.buildTransactionMetadata(data);
                            // the wallet currently doesn't support including tokens not previuosly minted
                            // so we need to include it manually.
                            coinSelection.outputs = coinSelection.outputs.map(function (output) {
                                if (output.address === addresses[0].address) {
                                    output.assets = tokens.map(function (t) {
                                        var asset = {
                                            policy_id: t.asset.policy_id,
                                            asset_name: Buffer.from(t.asset.asset_name).toString('hex'),
                                            quantity: t.asset.quantity
                                        };
                                        return asset;
                                    });
                                }
                                return output;
                            });
                            txBody = utils_1.Seed.buildTransactionWithToken(coinSelection, ttl, tokens, signingKeys, { data: data, config: config_1.Config.LocalCluster });
                            tx = utils_1.Seed.sign(txBody, signingKeys, metadata, scripts);
                            signed = Buffer.from(tx.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 5:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should mint multi issuer all 1000000 Tango1 token", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, addresses, keyPair, policyVKey, policySKey, keyHash, script, scriptHash, policyId, asset, tokens, scripts, minAda, amounts, info, ttl, coinSelection, rootKey, signingKeys, txBody, tx, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = [(_a.sent())[0]];
                            keyPair = utils_1.Seed.generateKeyPair();
                            policyVKey = keyPair.publicKey;
                            policySKey = keyPair.privateKey;
                            keyHash = utils_1.Seed.getKeyHash(policyVKey);
                            script = utils_1.Seed.buildMultiIssuerAllScript([utils_1.Seed.buildSingleIssuerScript(keyHash)]);
                            scriptHash = utils_1.Seed.getScriptHash(script);
                            policyId = utils_1.Seed.getPolicyId(scriptHash);
                            asset = new asset_wallet_1.AssetWallet(policyId, "Tango1", 1000000);
                            tokens = [new token_wallet_1.TokenWallet(asset, script, [keyPair])];
                            scripts = tokens.map(function (t) { return t.script; });
                            minAda = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            amounts = [minAda];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 3:
                            info = _a.sent();
                            ttl = info.node_tip.absolute_slot_number * 12000;
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts)];
                        case 4:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            // add policy signing key
                            tokens.filter(function (t) { return t.scriptKeyPairs; }).forEach(function (t) { return signingKeys.push.apply(signingKeys, t.scriptKeyPairs.map(function (k) { return k.privateKey.to_raw_key(); })); });
                            // the wallet currently doesn't support including tokens not previuosly minted
                            // so we need to include it manually.
                            coinSelection.outputs = coinSelection.outputs.map(function (output) {
                                if (output.address === addresses[0].address) {
                                    output.assets = tokens.map(function (t) {
                                        var asset = {
                                            policy_id: t.asset.policy_id,
                                            asset_name: Buffer.from(t.asset.asset_name).toString('hex'),
                                            quantity: t.asset.quantity
                                        };
                                        return asset;
                                    });
                                }
                                return output;
                            });
                            txBody = utils_1.Seed.buildTransactionWithToken(coinSelection, ttl, tokens, signingKeys, { config: config_1.Config.LocalCluster });
                            tx = utils_1.Seed.sign(txBody, signingKeys, null, scripts);
                            signed = Buffer.from(tx.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 5:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should mint multi issuer any 1000000 Tango2 token", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, addresses, keyPair, policyVKey, policySKey, keyHash, script, scriptHash, policyId, asset, tokens, scripts, minAda, amounts, info, ttl, coinSelection, rootKey, signingKeys, txBody, tx, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = [(_a.sent())[0]];
                            keyPair = utils_1.Seed.generateKeyPair();
                            policyVKey = keyPair.publicKey;
                            policySKey = keyPair.privateKey;
                            keyHash = utils_1.Seed.getKeyHash(policyVKey);
                            script = utils_1.Seed.buildMultiIssuerAnyScript([utils_1.Seed.buildSingleIssuerScript(keyHash)]);
                            scriptHash = utils_1.Seed.getScriptHash(script);
                            policyId = utils_1.Seed.getPolicyId(scriptHash);
                            asset = new asset_wallet_1.AssetWallet(policyId, "Tango2", 1000000);
                            tokens = [new token_wallet_1.TokenWallet(asset, script, [keyPair])];
                            scripts = tokens.map(function (t) { return t.script; });
                            minAda = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            amounts = [minAda];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 3:
                            info = _a.sent();
                            ttl = info.node_tip.absolute_slot_number * 12000;
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts)];
                        case 4:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            // add policy signing key
                            tokens.filter(function (t) { return t.scriptKeyPairs; }).forEach(function (t) { return signingKeys.push.apply(signingKeys, t.scriptKeyPairs.map(function (k) { return k.privateKey.to_raw_key(); })); });
                            // the wallet currently doesn't support including tokens not previuosly minted
                            // so we need to include it manually.
                            coinSelection.outputs = coinSelection.outputs.map(function (output) {
                                if (output.address === addresses[0].address) {
                                    output.assets = tokens.map(function (t) {
                                        var asset = {
                                            policy_id: t.asset.policy_id,
                                            asset_name: Buffer.from(t.asset.asset_name).toString('hex'),
                                            quantity: t.asset.quantity
                                        };
                                        return asset;
                                    });
                                }
                                return output;
                            });
                            txBody = utils_1.Seed.buildTransactionWithToken(coinSelection, ttl, tokens, signingKeys, { config: config_1.Config.LocalCluster });
                            tx = utils_1.Seed.sign(txBody, signingKeys, null, scripts);
                            signed = Buffer.from(tx.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 5:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should mint multi issuer at least 1000000 Tango3 token", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, addresses, keyPair, policyVKey, policySKey, keyHash, script, scriptHash, policyId, asset, tokens, scripts, minAda, amounts, info, ttl, coinSelection, rootKey, signingKeys, txBody, tx, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = [(_a.sent())[0]];
                            keyPair = utils_1.Seed.generateKeyPair();
                            policyVKey = keyPair.publicKey;
                            policySKey = keyPair.privateKey;
                            keyHash = utils_1.Seed.getKeyHash(policyVKey);
                            script = utils_1.Seed.buildMultiIssuerAtLeastScript(1, [utils_1.Seed.buildSingleIssuerScript(keyHash)]);
                            scriptHash = utils_1.Seed.getScriptHash(script);
                            policyId = utils_1.Seed.getPolicyId(scriptHash);
                            asset = new asset_wallet_1.AssetWallet(policyId, "Tango3", 1000000);
                            tokens = [new token_wallet_1.TokenWallet(asset, script, [keyPair])];
                            scripts = tokens.map(function (t) { return t.script; });
                            minAda = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            amounts = [minAda];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 3:
                            info = _a.sent();
                            ttl = info.node_tip.absolute_slot_number * 12000;
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts)];
                        case 4:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            // add policy signing key
                            tokens.filter(function (t) { return t.scriptKeyPairs; }).forEach(function (t) { return signingKeys.push.apply(signingKeys, t.scriptKeyPairs.map(function (k) { return k.privateKey.to_raw_key(); })); });
                            // the wallet currently doesn't support including tokens not previuosly minted
                            // so we need to include it manually.
                            coinSelection.outputs = coinSelection.outputs.map(function (output) {
                                if (output.address === addresses[0].address) {
                                    output.assets = tokens.map(function (t) {
                                        var asset = {
                                            policy_id: t.asset.policy_id,
                                            asset_name: Buffer.from(t.asset.asset_name).toString('hex'),
                                            quantity: t.asset.quantity
                                        };
                                        return asset;
                                    });
                                }
                                return output;
                            });
                            txBody = utils_1.Seed.buildTransactionWithToken(coinSelection, ttl, tokens, signingKeys, { config: config_1.Config.LocalCluster });
                            tx = utils_1.Seed.sign(txBody, signingKeys, null, scripts);
                            signed = Buffer.from(tx.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 5:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should mint after 1000000 Tango4 token", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, addresses, info, ttl, keyPair, policyVKey, policySKey, keyHash, script, scriptHash, policyId, asset, tokens, scripts, minAda, amounts, coinSelection, rootKey, signingKeys, txBody, tx, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = [(_a.sent())[0]];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 3:
                            info = _a.sent();
                            ttl = info.node_tip.absolute_slot_number * 12000;
                            keyPair = utils_1.Seed.generateKeyPair();
                            policyVKey = keyPair.publicKey;
                            policySKey = keyPair.privateKey;
                            keyHash = utils_1.Seed.getKeyHash(policyVKey);
                            script = utils_1.Seed.buildMultiIssuerAllScript([utils_1.Seed.buildAfterScript(info.node_tip.absolute_slot_number - 1), utils_1.Seed.buildSingleIssuerScript(keyHash)]);
                            scriptHash = utils_1.Seed.getScriptHash(script);
                            policyId = utils_1.Seed.getPolicyId(scriptHash);
                            asset = new asset_wallet_1.AssetWallet(policyId, "Tango4", 1000000);
                            tokens = [new token_wallet_1.TokenWallet(asset, script, [keyPair])];
                            scripts = tokens.map(function (t) { return t.script; });
                            minAda = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            amounts = [minAda];
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts)];
                        case 4:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            // add policy signing keys
                            tokens.filter(function (t) { return t.scriptKeyPairs; }).forEach(function (t) { return signingKeys.push.apply(signingKeys, t.scriptKeyPairs.map(function (k) { return k.privateKey.to_raw_key(); })); });
                            // the wallet currently doesn't support including tokens not previuosly minted
                            // so we need to include it manually.
                            coinSelection.outputs = coinSelection.outputs.map(function (output) {
                                if (output.address === addresses[0].address) {
                                    output.assets = tokens.map(function (t) {
                                        var asset = {
                                            policy_id: t.asset.policy_id,
                                            asset_name: Buffer.from(t.asset.asset_name).toString('hex'),
                                            quantity: t.asset.quantity
                                        };
                                        return asset;
                                    });
                                }
                                return output;
                            });
                            txBody = utils_1.Seed.buildTransactionWithToken(coinSelection, ttl, tokens, signingKeys, { startSlot: info.node_tip.absolute_slot_number, config: config_1.Config.LocalCluster });
                            tx = utils_1.Seed.sign(txBody, signingKeys, null, scripts);
                            signed = Buffer.from(tx.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 5:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should mint before 1000000 Tango5 token", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, addresses, info, ttl, keyPair, policyVKey, policySKey, keyHash, script, scriptHash, policyId, asset, tokens, scripts, minAda, amounts, coinSelection, rootKey, signingKeys, txBody, tx, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            return [4 /*yield*/, wallet.getAddresses()];
                        case 2:
                            addresses = [(_a.sent())[0]];
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 3:
                            info = _a.sent();
                            ttl = info.node_tip.absolute_slot_number * 12000;
                            keyPair = utils_1.Seed.generateKeyPair();
                            policyVKey = keyPair.publicKey;
                            policySKey = keyPair.privateKey;
                            keyHash = utils_1.Seed.getKeyHash(policyVKey);
                            script = utils_1.Seed.buildMultiIssuerAllScript([utils_1.Seed.buildBeforeScript(ttl + 1), utils_1.Seed.buildSingleIssuerScript(keyHash)]);
                            scriptHash = utils_1.Seed.getScriptHash(script);
                            policyId = utils_1.Seed.getPolicyId(scriptHash);
                            asset = new asset_wallet_1.AssetWallet(policyId, "Tango5", 1000000);
                            tokens = [new token_wallet_1.TokenWallet(asset, script, [keyPair])];
                            scripts = tokens.map(function (t) { return t.script; });
                            minAda = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            amounts = [minAda];
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, amounts)];
                        case 4:
                            coinSelection = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            // add policy signing keys
                            tokens.filter(function (t) { return t.scriptKeyPairs; }).forEach(function (t) { return signingKeys.push.apply(signingKeys, t.scriptKeyPairs.map(function (k) { return k.privateKey.to_raw_key(); })); });
                            // the wallet currently doesn't support including tokens not previuosly minted
                            // so we need to include it manually.
                            coinSelection.outputs = coinSelection.outputs.map(function (output) {
                                if (output.address === addresses[0].address) {
                                    output.assets = tokens.map(function (t) {
                                        var asset = {
                                            policy_id: t.asset.policy_id,
                                            asset_name: Buffer.from(t.asset.asset_name).toString('hex'),
                                            quantity: t.asset.quantity
                                        };
                                        return asset;
                                    });
                                }
                                return output;
                            });
                            txBody = utils_1.Seed.buildTransactionWithToken(coinSelection, ttl, tokens, signingKeys, { config: config_1.Config.LocalCluster });
                            tx = utils_1.Seed.sign(txBody, signingKeys, null, scripts);
                            signed = Buffer.from(tx.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 5:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should send 100 Tango tokens", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, receiver, rWallet, addresses, asset, assets, minUtxo, tx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            receiver = wallets.find(function (w) { return w.id == "60bb5513e4e262e445cf203db9cf73ba925064d2"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver.id)];
                        case 2:
                            rWallet = _a.sent();
                            return [4 /*yield*/, rWallet.getAddresses()];
                        case 3:
                            addresses = [(_a.sent())[0]];
                            asset = new asset_wallet_1.AssetWallet(tangoPolicyId, "Tango", 100);
                            assets = {};
                            assets[addresses[0].id] = [asset];
                            minUtxo = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            return [4 /*yield*/, wallet.sendPayment(payeer.passphrase, addresses, [minUtxo], ['send 100 Tango tokens'], assets)];
                        case 4:
                            tx = _a.sent();
                            expect(tx).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
        it("should construct tx to send 100 Tango tokens ", function () {
            return __awaiter(this, void 0, void 0, function () {
                var payeer, wallet, receiver, rWallet, addresses, asset, assets, minUtxo, data, coinSelection, info, rootKey, signingKeys, metadata, txBuild, txBody, signed, txId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            payeer = wallets.find(function (w) { return w.id == "2a793eb367d44a42f658eb02d1004f50c14612fd"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(payeer.id)];
                        case 1:
                            wallet = _a.sent();
                            receiver = wallets.find(function (w) { return w.id == "60bb5513e4e262e445cf203db9cf73ba925064d2"; });
                            return [4 /*yield*/, walletServer.getShelleyWallet(receiver.id)];
                        case 2:
                            rWallet = _a.sent();
                            return [4 /*yield*/, rWallet.getAddresses()];
                        case 3:
                            addresses = [(_a.sent())[10]];
                            asset = new asset_wallet_1.AssetWallet(tangoPolicyId, "Tango", 100);
                            assets = {};
                            assets[addresses[0].id] = [asset];
                            minUtxo = utils_1.Seed.getMinUtxoValueWithAssets([asset], config_1.Config.LocalCluster);
                            data = ['send 100 Tango tokens'];
                            return [4 /*yield*/, wallet.getCoinSelection(addresses, [minUtxo], data, assets)];
                        case 4:
                            coinSelection = _a.sent();
                            return [4 /*yield*/, walletServer.getNetworkInformation()];
                        case 5:
                            info = _a.sent();
                            rootKey = utils_1.Seed.deriveRootKey(payeer.mnemonic_sentence);
                            signingKeys = coinSelection.inputs.map(function (i) {
                                var privateKey = utils_1.Seed.deriveKey(rootKey, i.derivation_path).to_raw_key();
                                return privateKey;
                            });
                            metadata = utils_1.Seed.buildTransactionMetadata(data);
                            txBuild = utils_1.Seed.buildTransaction(coinSelection, info.node_tip.absolute_slot_number * 12000, { metadata: metadata });
                            txBody = utils_1.Seed.sign(txBuild, signingKeys, metadata);
                            signed = Buffer.from(txBody.to_bytes()).toString('hex');
                            return [4 /*yield*/, walletServer.submitTx(signed)];
                        case 6:
                            txId = _a.sent();
                            expect(txId).not.undefined;
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
